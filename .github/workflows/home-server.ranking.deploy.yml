name: Tech-pick Ranking-Module CI/CD

on:
  push:
    branches:
      - 'backend-v2' # 배포 대상 브랜치
    paths:
      - '.github/workflow/home-server.ranking.deploy.yml'
      - 'backend/techpick-core/**'
      - 'backend/techpick-ranking/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env: # 홈 서버의 docker-compose가 위치한 디렉토리
      database-version: 'v2'
      server-name: 'server.ranking' # 주의: 홈 서버의 docker-compose가 위치한 디렉토리 명과 일치해야 합니다.
      module-name: 'techpick-ranking'

    steps:
      # 저장소 Checkout
      - name: Checkout source code
        uses: actions/checkout@v4

      # Gradle 실행 권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./backend/gradlew

      # JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # Spring boot application, Docker image 빌드
      - name: Build and Deploy ${{ env.module-name }} Module
        run: |
          ./backend/gradlew -p backend/${{ env.module-name }} clean build -x test
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/techpick:${{ env.server-name }}-${{ github.sha }} backend/${{ env.module-name }}

      - # Docker hub 로그인
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - # Docker hub 업로드
        name: Publish to docker hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/techpick:${{ env.server-name }}-${{ github.sha }}

      - name: Deploy on Test-Server
        uses: appleboy/ssh-action@master
        with:
          host: minlife.me
          port: 4242
          username: root
          password: ${{ secrets.SSH_TEST_SERVER_KYEU_PASSWORD }}
          script: |
            # ****************************************************************
            echo "login docker hub for private repository access ..."
            # ****************************************************************
            
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            echo "docker - pulling..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/techpick:${{ env.server-name }}-${{ github.sha }}
            echo "docker - changing image name and tag ..."
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/techpick:${{ env.server-name }}-${{ github.sha }} techpick:${{ env.server-name }}-staging

            # ****************************************************************
            echo "create .env file with github repository's ENV setting ..."
            # ****************************************************************

            cd /home/project/techpick/${{ env.server-name }}
            rm -rf .env
            touch .env

            # !!!!!!!! 아래 MYSQL 환경 변수는 techpick-core의 엔티티 의존으로 인해 반드시 필요함. 안그러면 컨테이너 실행이 안된다;;;
            # 날 잡고 core를 한번 손봐야 할 것 같다...
            echo "DOCKER_MYSQL_USERNAME=${{ secrets.DOCKER_MYSQL_USERNAME }}" >> .env
            echo "DOCKER_MYSQL_PASSWORD=${{ secrets.DOCKER_MYSQL_PASSWORD }}" >> .env
            echo "DOCKER_MYSQL_DATABASE=${{ secrets.DOCKER_MYSQL_DATABASE }}_${{ env.database-version }}" >> .env
            echo "DOCKER_MYSQL_URL=jdbc:mysql://techpick.infra.service-db/${{ secrets.DOCKER_MYSQL_DATABASE }}_${{ env.database-version }}?createDatabaseIfNotExist=true" >> .env
            
            echo "DOCKER_MONGO_AUTH=${{ secrets.DOCKER_MONGO_AUTH }}" >> .env
            echo "DOCKER_MONGO_USERNAME=${{ secrets.DOCKER_MONGO_USERNAME }}" >> .env
            echo "DOCKER_MONGO_PASSWORD=${{ secrets.DOCKER_MONGO_PASSWORD }}" >> .env
            echo "DOCKER_MONGO_DATABASE=${{ secrets.DOCKER_MONGO_DATABASE }}" >> .env
            echo "DOCKER_MONGO_URL=${{ secrets.DOCKER_MONGO_URL }}" >> .env
            
            echo "RABBITMQ_HOST"=${{ secrets.RABBITMQ_HOST }} >> .env
            echo "RABBITMQ_PORT"=${{ secrets.RABBITMQ_PORT }} >> .env
            echo "RABBITMQ_USERNAME"=${{ secrets.RABBITMQ_USERNAME }} >> .env
            echo "RABBITMQ_PASSWORD"=${{ secrets.RABBITMQ_PASSWORD }} >> .env
            echo "RABBITMQ_COOKIE"=${{ secrets.RABBITMQ_ERLANG_COOKIE }} >> .env
            
            docker-compose down
            docker-compose up -d

            # ****************************************************************
            echo "docker - pruning images that passed 24h ..."
            # ****************************************************************
            docker image prune -af --filter "until=24h"

      - name: Discord Webhook Notification
        uses: sarisia/actions-status-discord@v1.14.7
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: ${{ job.status }}
          title: 'RANKING SERVER DEPLOY'
          description: 'RANKING 서버 배포가 완료되었습니다.'
          color: 0xff91a4
          url: 'https://github.com/sarisia/actions-status-discord'
          username: GitHub Actions
