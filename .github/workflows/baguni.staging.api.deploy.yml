name: Baguni Staging Api-Module CI/CD

on:
  push:
    branches:
      - 'staging' # 배포 대상 브랜치
    paths:
      - 'backend/baguni-common/**'
      - 'backend/baguni-domain/**'
      - 'backend/baguni-api/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      docker-hub-username: 'minkyeu' # 김민규
      docker-hub-repo: 'baguni'
      docker-hub-password: ${{ secrets.DOCKERHUB_PASSWORD_STAGING }}
      module-name: 'baguni-api'
      project-directory: '/home/project/baguni/staging' # path to docker-compose.yaml

    steps:
      # 저장소 Checkout
      - name: Checkout source code
        uses: actions/checkout@v4

      # Gradle 실행 권한 부여
      - name: Grant execute permission to gradlew
        run: chmod +x ./backend/gradlew

      # JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # Spring boot application, Docker image 빌드
      - name: Build and Deploy ${{ env.module-name }} Module
        run: |
          ./backend/gradlew -p backend/${{ env.module-name }} clean build -x test
          docker build -t ${{ env.docker-hub-username }}/${{ env.docker-hub-repo }}:${{ env.module-name }} backend/${{ env.module-name }}

      - # Docker hub 로그인
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.docker-hub-username }}
          password: ${{ env.docker-hub-password }}
      - # Docker hub 업로드
        name: Publish to docker hub
        run: docker push ${{ env.docker-hub-username }}/${{ env.docker-hub-repo }}:${{ env.module-name }}


      - name: Deploy on Test-Server
        uses: appleboy/ssh-action@master
        with:
          host: minlife.me
          port: 4242
          username: root
          password: ${{ secrets.SSH_TEST_SERVER_KYEU_PASSWORD }}
          script: |
            echo "login docker hub for private repository access ..."
            echo ${{ env.docker-hub-password }} | docker login -u ${{ env.docker-hub-username }} --password-stdin
            
            echo "docker - pulling..."
            docker pull ${{ env.docker-hub-username }}/${{ env.docker-hub-repo }}:${{ env.module-name }}
            
            echo "moving to project directory..."
            cd ${{ env.project-directory }}
            
            echo "restarting container..."
            docker compose down ${{ env.module-name }}
            docker compose up ${{ env.module-name }} -d

      # 서버가 완전히 기동될 때까지 대기하는 단계
      - name: Wait for API Server to be Ready
        run: |
          echo "🔍 Checking API server status..."
          attempt=0
          max_attempts=10

          while true; do
            http_status=$(curl -o /dev/null -s -w "%{http_code}" https://api.staging.minlife.me)

            if [ "$http_status" -ne 502 ]; then
              echo "✅ API Server responded Continuing..."
              break
            fi

            attempt=$((attempt+1))
            if [ $attempt -ge $max_attempts ]; then
              echo "❌ API Server is still returning 502 after $max_attempts attempts. Exiting..."
              exit 1
            fi

            echo "⏳ API Server still returning 502 (Bad Gateway), retrying in 5 seconds... (Attempt: $attempt)"
            sleep 5
          done

      # Node 설치
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Newman 설치, slack을 위한 메시지 내용 옵션 추가
      - name: Install Newman + reporters
        run: |
          npm install -g newman newman-reporter-htmlextra newman-reporter-slackmsg

      # Newman API 테스트 실행
      - name: Run Newman tests
        id: newman-run
        run: |
          newman run ${{ secrets.POSTMAN_COLLECTION_URL }} \
            -r htmlextra,slackmsg \
            --reporter-htmlextra-export report.html \
            --reporter-slackmsg-webhookurl ${{ secrets.SLACK_TEST_WEBHOOK_URL }} \
            --reporter-slackmsg-verbose
