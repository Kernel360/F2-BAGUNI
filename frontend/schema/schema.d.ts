/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/login/naver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 네이버 소셜 로그인 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login/kakao": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 카카오 소셜 로그인 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 구글 소셜 로그인 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/login/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그아웃
         * @description techPickLogin, access_token 쿠키를 삭제합니다.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: never;
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 조회
         * @description 사용자가 등록한 전체 태그를 조회합니다.
         */
        get: operations["getAllUserTag"];
        put?: never;
        /**
         * 태그 추가
         * @description 새로운 태그를 추가합니다.
         */
        post: operations["createTag"];
        /**
         * 태그 삭제
         * @description 사용자가 등록한 태그를 삭제합니다.
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        /**
         * 태그 수정
         * @description 사용자가 등록한 태그를 수정합니다.
         */
        patch: operations["updateTag"];
        trace?: never;
    };
    "/api/shared": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 자신이 공유한 폴더 목록 조회
         * @description 자신이 공유한 폴더 목록을 조회합니다.
         */
        get: operations["getUserSharedFolderList"];
        put?: never;
        /**
         * 내 폴더를 공유 폴더로 등록
         * @description 폴더를 공유 폴더로 등록하며, 공유된 폴더는 부여된 UUID를 통해 접근할 수 있습니다.
         */
        post: operations["createSharedFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 폴더 리스트 내 픽 리스트 조회
         * @description 해당 폴더 리스트 각각의 픽 리스트를 조회합니다.
         */
        get: operations["getFolderChildPickList"];
        put?: never;
        /**
         * 픽 생성
         * @description 픽을 생성합니다.
         */
        post: operations["savePick"];
        /**
         * 픽 삭제
         * @description 휴지통에 있는 픽만 삭제 가능합니다.
         */
        delete: operations["deletePick"];
        options?: never;
        head?: never;
        /**
         * 픽 내용 수정
         * @description 픽 내용(제목, 메모)을 수정합니다.
         */
        patch: operations["updatePick"];
        trace?: never;
    };
    "/api/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 루트 폴더와 하위 리스트 조회
         * @description 사용자의 루트 폴더와 루트 하위 전체 폴더를 조회합니다.
         */
        get: operations["getAllRootFolderList"];
        put?: never;
        /**
         * 폴더 추가
         * @description 새로운 폴더를 추가합니다.
         */
        post: operations["createFolder"];
        /**
         * 폴더 삭제
         * @description 사용자가 등록한 폴더를 삭제합니다.
         */
        delete: operations["deleteFolder"];
        options?: never;
        head?: never;
        /**
         * 폴더 수정
         * @description 사용자가 등록한 폴더를 수정합니다.
         */
        patch: operations["updateFolder"];
        trace?: never;
    };
    "/api/chrome/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 크롬 북마크 업로드
         * @description 내보내기한 크롬 북마크(.html)을 업로드 하여 일괄 추가합니다. 이미 등록된 url(중복 url)을 응답으로 보냅니다.
         */
        post: operations["importBookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 태그 이동
         * @description 사용자가 등록한 태그의 순서를 변경합니다.
         */
        patch: operations["moveTag"];
        trace?: never;
    };
    "/api/picks/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 픽 이동
         * @description 픽을 같은 폴더 혹은 다른 폴더로 이동합니다.
         */
        patch: operations["movePick"];
        trace?: never;
    };
    "/api/folders/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 폴더 이동
         * @description 사용자가 등록한 폴더를 이동합니다.
         */
        patch: operations["moveFolder"];
        trace?: never;
    };
    "/api/shared/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 공유 폴더 조회
         * @description UUID를 통해 공유된 폴더에 접근할 수 있습니다.
         */
        get: operations["getSharedFolderWithFullInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 픽 상세 조회
         * @description 픽을 상세 조회합니다.
         */
        get: operations["getPick"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 픽 리스트 검색(페이지네이션)
         * @description 페이지네이션 처리 된 픽 리스트 검색
         */
        get: operations["searchPickPagination"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/search/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 픽 리스트 검색
         * @description 페이지네이션 처리 되지 않은 픽 리스트 검색
         */
        get: operations["searchPick"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 링크 픽 여부 조회
         * @description 해당 링크를 픽한 적이 있는지 확인합니다.
         */
        get: operations["getPickUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 해당 링크 og 데이터 조회
         * @description 해당 링크의 og 태그 데이터를 스크래핑을 통해 가져옵니다.
         */
        get: operations["getLinkData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/basic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 기본 폴더 리스트 조회
         * @description 사용자의 루트, 미분류, 휴지통 폴더를 조회합니다.
         */
        get: operations["getBasicFolderList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chrome/{folderId}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 폴더 다운로드
         * @description 사용자의 특정 폴더를 크롬 브라우저 북마크에 import 가능한 형태로 다운로드 받습니다.
         */
        get: operations["exportFolder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chrome/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 전체 폴더 다운로드
         * @description 사용자의 특정 폴더를 크롬 브라우저 북마크에 import 가능한 형태로 다운로드 받습니다.
         */
        get: operations["exportUserFolder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shared/{sourceFolderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 폴더 공유 취소
         * @description 공유된 폴더를 비공개로 변경 합니다.
         */
        delete: operations["deleteSharedFolder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "techpick.api.application.tag.dto.TagApiRequest$Create": {
            /** @example SpringBoot */
            name: string;
            /**
             * Format: int32
             * @example 12
             */
            colorNumber: number;
        };
        "techpick.api.application.tag.dto.TagApiResponse$Create": {
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int32 */
            colorNumber?: number;
        };
        "techpick.api.application.sharedFolder.dto.SharedFolderApiResponse$Create": {
            /**
             * @description {shared.folderAccessToken.description}
             * @example 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
             */
            folderAccessToken: string;
        };
        "techpick.api.application.pick.dto.PickApiRequest$Create": {
            /** @example Record란? */
            title?: string;
            /** @example [
             *       4,
             *       5,
             *       2,
             *       1,
             *       3
             *     ] */
            tagIdOrderedList?: number[];
            /**
             * Format: int64
             * @example 1
             */
            parentFolderId?: number;
            linkInfo?: components["schemas"]["techpick.api.domain.link.dto.LinkInfo"];
        };
        "techpick.api.domain.link.dto.LinkInfo": {
            /** @example https://velog.io/@hyeok_1212/Java-Record-%EC%82%AC%EC%9A%A9%ED%95%98%EC%8B%9C%EB%82%98%EC%9A%94 */
            url: string;
            /** @example [Java] Record 사용하시나요? */
            title?: string;
            /** @example IntelliJ : 레코드 써봐 */
            description?: string;
            /** @example https://velog.velcdn.com/images/hyeok_1212/post/5ea148fb-1490-4b03-811e-222b4d26b65e/image.png */
            imageUrl?: string;
            /**
             * Format: date-time
             * @example 2024-10-19T10:46:30.035Z
             */
            invalidatedAt?: string;
        };
        "techpick.api.application.pick.dto.PickApiResponse$Pick": {
            /** Format: int64 */
            id?: number;
            title?: string;
            linkInfo?: components["schemas"]["techpick.api.domain.link.dto.LinkInfo"];
            /** Format: int64 */
            parentFolderId?: number;
            tagIdOrderedList?: number[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        "techpick.api.application.folder.dto.FolderApiRequest$Create": {
            /** @example backend */
            name: string;
            /**
             * Format: int64
             * @example 3
             */
            parentFolderId: number;
        };
        "techpick.api.application.folder.dto.FolderApiResponse": {
            /** Format: int64 */
            id?: number;
            name?: string;
            /**
             * @example GENERAL
             * @enum {string}
             */
            folderType?: "UNCLASSIFIED" | "RECYCLE_BIN" | "ROOT" | "GENERAL";
            /** Format: int64 */
            parentFolderId?: number;
            childFolderIdOrderedList?: number[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** @description     비공개 폴더일 경우 null을 반환.
             *         공유된 폴더일 경우 조회용 UUID 토큰을 반환.
             *      */
            folderAccessToken?: string | null;
        };
        "techpick.api.application.tag.dto.TagApiRequest$Update": {
            /**
             * Format: int64
             * @example 2
             */
            id: number;
            /** @example new tag name */
            name: string;
            /**
             * Format: int32
             * @example 7
             */
            colorNumber: number;
        };
        "techpick.api.application.tag.dto.TagApiRequest$Move": {
            /**
             * Format: int64
             * @example 3
             */
            id: number;
            /**
             * Format: int32
             * @example 1
             */
            orderIdx?: number;
        };
        "techpick.api.application.pick.dto.PickApiRequest$Update": {
            /**
             * Format: int64
             * @example 1
             */
            id: number;
            /** @example Record란 뭘까? */
            title?: string;
            /**
             * Format: int64
             * @example 3
             */
            parentFolderId?: number;
            /** @example [
             *       4,
             *       5,
             *       2,
             *       1
             *     ] */
            tagIdOrderedList?: number[];
        };
        "techpick.api.application.pick.dto.PickApiRequest$Move": {
            /** @example [
             *       1,
             *       2
             *     ] */
            idList: number[];
            /**
             * Format: int64
             * @example 3
             */
            destinationFolderId: number;
            /**
             * Format: int32
             * @example 0
             */
            orderIdx?: number;
        };
        "techpick.api.application.folder.dto.FolderApiRequest$Update": {
            /**
             * Format: int64
             * @example 3
             */
            id: number;
            /** @example SpringBoot */
            name: string;
        };
        "techpick.api.application.folder.dto.FolderApiRequest$Move": {
            /** @example [
             *       12,
             *       11,
             *       4,
             *       5,
             *       1,
             *       6
             *     ] */
            idList: number[];
            /**
             * Format: int64
             * @example 7
             */
            parentFolderId: number;
            /**
             * Format: int64
             * @example 3
             */
            destinationFolderId: number;
            /**
             * Format: int32
             * @example 2
             */
            orderIdx?: number;
        };
        "techpick.api.application.tag.dto.TagApiResponse$Read": {
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int32 */
            colorNumber?: number;
        };
        "techpick.api.application.sharedFolder.dto.SharedFolderApiResponse$ReadFolderPartial": {
            /**
             * Format: int64
             * @description 원본 폴더의 이름
             */
            sourceFolderId?: number;
            /**
             * @description 원본 폴더의 이름
             * @example 리액트 모음집
             */
            sourceFolderName: string;
            /**
             * Format: date-time
             * @description 원본 폴더의 생성 시점
             * @example 2024-11-29T06:03:49.182Z
             */
            sourceFolderCreatedAt?: string;
            /**
             * Format: date-time
             * @description 원본 폴더의 마지막 업데이트 시점
             * @example 2024-11-29T06:03:49.182Z
             */
            sourceFolderUpdatedAt?: string;
            /**
             * @description {shared.folderAccessToken.description}
             * @example 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
             */
            folderAccessToken: string;
        };
        "techpick.api.application.sharedFolder.dto.SharedFolderApiResponse$ReadFolderFull": {
            /**
             * @description 원본 폴더의 이름
             * @example 리액트 모음집
             */
            folderName: string;
            /**
             * Format: date-time
             * @description 원본 폴더의 생성 시점
             * @example 2024-11-29T06:03:49.182Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description 원본 폴더의 마지막 업데이트 시점
             * @example 2024-11-29T06:03:49.182Z
             */
            updatedAt?: string;
            /** @description 폴더 내 pick 리스트 */
            pickList?: components["schemas"]["techpick.api.domain.sharedFolder.dto.SharedFolderResult$SharedPickInfo"][];
            /**
             * @description 해당 폴더 내에서 사용된 모든 태그 정보가 담길 배열. tagList.get(idx) 로 태그 정보를 획득할 수 있습니다.
             * @example [
             *       {
             *         "name": "리액트",
             *         "colorNumber": "2"
             *       },
             *       {
             *         "name": "CSS",
             *         "colorNumber": "8"
             *       }
             *     ]
             */
            tagList?: components["schemas"]["techpick.api.domain.sharedFolder.dto.SharedFolderResult$SharedTagInfo"][];
        };
        /** @description 폴더 내 pick 리스트 */
        "techpick.api.domain.sharedFolder.dto.SharedFolderResult$SharedPickInfo": {
            /** @example 자바 레코드 참고 블로그 1 */
            title?: string;
            linkInfo?: components["schemas"]["techpick.api.domain.link.dto.LinkInfo"];
            /**
             * @description tagList.get(idx) 로 태그 정보를 획득할 수 있습니다.
             * @example [
             *       0,
             *       5,
             *       2,
             *       3
             *     ]
             */
            tagIdxList?: number[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /**
         * @description 해당 폴더 내에서 사용된 모든 태그 정보가 담길 배열. tagList.get(idx) 로 태그 정보를 획득할 수 있습니다.
         * @example [
         *       {
         *         "name": "리액트",
         *         "colorNumber": "2"
         *       },
         *       {
         *         "name": "CSS",
         *         "colorNumber": "8"
         *       }
         *     ]
         */
        "techpick.api.domain.sharedFolder.dto.SharedFolderResult$SharedTagInfo": {
            name?: string;
            /** Format: int32 */
            colorNumber?: number;
        };
        "techpick.api.application.pick.dto.PickApiResponse$FolderPickList": {
            /** Format: int64 */
            folderId?: number;
            pickList?: components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"][];
        };
        "techpick.api.application.pick.dto.PickSliceResponseTechpick.api.application.pick.dto.PickApiResponse$Pick": {
            content?: components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"][];
            /** Format: int64 */
            lastCursor?: number;
            /** Format: int32 */
            size?: number;
            hasNext?: boolean;
        };
        "techpick.api.application.link.dto.LinkApiResponse": {
            title?: string;
            description?: string;
            imageUrl?: string;
        };
        "techpick.api.application.tag.dto.TagApiRequest$Delete": {
            /**
             * Format: int64
             * @example 4
             */
            id: number;
        };
        "techpick.api.application.pick.dto.PickApiRequest$Delete": {
            /** @example [
             *       1
             *     ] */
            idList: number[];
        };
        "techpick.api.application.folder.dto.FolderApiRequest$Delete": {
            /** @example [
             *       12,
             *       11,
             *       4,
             *       5,
             *       1,
             *       6
             *     ] */
            idList: number[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAllUserTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.tag.dto.TagApiResponse$Read"][];
                };
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.tag.dto.TagApiRequest$Create"];
            };
        };
        responses: {
            /** @description 태그 추가 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.tag.dto.TagApiResponse$Create"];
                };
            };
            /** @description 중복된 태그 이름 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.tag.dto.TagApiRequest$Delete"];
            };
        };
        responses: {
            /** @description 태그 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 태그만 삭제할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.tag.dto.TagApiRequest$Update"];
            };
        };
        responses: {
            /** @description 태그 수정 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 중복된 태그 이름 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 태그만 수정할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserSharedFolderList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 공유 폴더 목록 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.sharedFolder.dto.SharedFolderApiResponse$ReadFolderPartial"][];
                };
            };
        };
    };
    createSharedFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": number;
            };
        };
        responses: {
            /** @description 공유 폴더 생성 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.sharedFolder.dto.SharedFolderApiResponse$Create"];
                };
            };
            /** @description 자신의 폴더만 공유할 수 있습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.sharedFolder.dto.SharedFolderApiResponse$Create"];
                };
            };
        };
    };
    getFolderChildPickList: {
        parameters: {
            query?: {
                /**
                 * @description 조회할 폴더 ID 목록
                 * @example 1, 2, 3
                 */
                folderIdList?: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 리스트 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$FolderPickList"][];
                };
            };
        };
    };
    savePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.pick.dto.PickApiRequest$Create"];
            };
        };
        responses: {
            /** @description 픽 생성 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
            /** @description 잘못된 태그 접근 */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
            /** @description 접근할 수 없는 폴더 */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    deletePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.pick.dto.PickApiRequest$Delete"];
            };
        };
        responses: {
            /** @description 픽 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 휴지통이 아닌 폴더에서 픽 삭제 불가 */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 미확인 서버 에러 혹은 존재하지 않는 픽 삭제 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.pick.dto.PickApiRequest$Update"];
            };
        };
        responses: {
            /** @description 픽 내용 수정 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    getAllRootFolderList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description 본인 폴더만 조회할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.folder.dto.FolderApiResponse"][];
                };
            };
        };
    };
    createFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.folder.dto.FolderApiRequest$Create"];
            };
        };
        responses: {
            /** @description 폴더 추가 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.folder.dto.FolderApiResponse"];
                };
            };
        };
    };
    deleteFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.folder.dto.FolderApiRequest$Delete"];
            };
        };
        responses: {
            /** @description 폴더 삭제 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 기본 폴더는 삭제할 수 없습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 폴더만 삭제할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.folder.dto.FolderApiRequest$Update"];
            };
        };
        responses: {
            /** @description 폴더 수정 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 기본 폴더는 수정할 수 없습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 폴더만 수정할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    importBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                };
            };
        };
        responses: {
            /** @description 다운로드 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description 파일 형식 및 파싱 오류 */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    moveTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.tag.dto.TagApiRequest$Move"];
            };
        };
        responses: {
            /** @description 태그 이동 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 태그만 이동할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    movePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.pick.dto.PickApiRequest$Move"];
            };
        };
        responses: {
            /** @description 픽 이동 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 폴더가 존재하지 않음. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    moveFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["techpick.api.application.folder.dto.FolderApiRequest$Move"];
            };
        };
        responses: {
            /** @description 폴더 이동 성공 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 기본 폴더는 이동할 수 없습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 본인 폴더만 이동할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 미분류폴더, 휴지통 폴더로 이동할 수 없습니다. */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSharedFolderWithFullInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 공유 폴더 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.sharedFolder.dto.SharedFolderApiResponse$ReadFolderFull"];
                };
            };
            /** @description 올바르지 않은 UUID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPick: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 상세 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    searchPickPagination: {
        parameters: {
            query?: {
                /**
                 * @description 조회할 폴더 ID 목록
                 * @example 3, 4, 5
                 */
                folderIdList?: string;
                /**
                 * @description 검색 토큰 목록
                 * @example Record, 스프링
                 */
                searchTokenList?: string;
                /**
                 * @description 검색 태그 ID 목록
                 * @example 1, 2, 3
                 */
                tagIdList?: string;
                /**
                 * @description 픽 시작 id 조회
                 * @example 0
                 */
                cursor?: string;
                /**
                 * @description 한 페이지에 가져올 픽 개수
                 * @example 20
                 */
                size?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickSliceResponseTechpick.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    searchPick: {
        parameters: {
            query?: {
                /**
                 * @description 조회할 폴더 ID 목록
                 * @example 3, 4, 5
                 */
                folderIdList?: string;
                /**
                 * @description 검색 토큰 목록
                 * @example Record, 스프링
                 */
                searchTokenList?: string;
                /**
                 * @description 검색 태그 ID 목록
                 * @example 1, 2, 3
                 */
                tagIdList?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"][];
                };
            };
        };
    };
    getPickUrl: {
        parameters: {
            query: {
                link: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 여부 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
            /** @description 해당 링크에 대해 픽이 되어 있지 않습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.pick.dto.PickApiResponse$Pick"];
                };
            };
        };
    };
    getLinkData: {
        parameters: {
            query: {
                /** @description og 태그 데이터 가져올 url */
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.link.dto.LinkApiResponse"];
                };
            };
        };
    };
    getBasicFolderList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 조회 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.folder.dto.FolderApiResponse"][];
                };
            };
            /** @description 본인 폴더만 조회할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["techpick.api.application.folder.dto.FolderApiResponse"][];
                };
            };
        };
    };
    exportFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                folderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 다운로드 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description 본인 폴더만 다운로드할 수 있습니다. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    exportUserFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 다운로드 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    deleteSharedFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sourceFolderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 폴더 비공개화 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 자신의 공유 폴더만 삭제 할 수 있습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
