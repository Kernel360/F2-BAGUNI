/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/tag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 태그 리스트 조회
         * @description 자신이 등록한 태그 리스트를 조회한다. 태그는 order 오름차순으로 정렬되어있음.
         */
        get: operations["getTagListByUser"];
        /**
         * 태그 수정
         * @description 자신이 등록한 태그 리스트를 수정한다.
         */
        put: operations["updateTagList"];
        /**
         * 태그 생성
         * @description 태그를 생성합니다. 생성된 태그는 가장 마지막 순서에 위치합니다.
         */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/structures/picks/{pickId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 픽 이동
         * @description 픽을 특정 폴더 안으로 이동
         */
        put: operations["movePick"];
        post?: never;
        /**
         * 휴지통에 있는 픽 삭제
         * @description 휴지통에 있는 픽 삭제, 휴지통이 아닌 다른곳에 있는 픽일 경우 예외발생
         */
        delete: operations["deletePick"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/structures/folders/{folderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 폴더 이동
         * @description 폴더를 특정 폴더 안으로 이동
         */
        put: operations["moveFolder"];
        post?: never;
        /**
         * 휴지통에 있는 폴더 삭제
         * @description 휴지통에 있는 폴더 삭제, 휴지통이 아닌 다른곳에 있는 폴더일 경우 예외발생
         */
        delete: operations["deleteFolder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 폴더에 있는 픽 리스트 조회
         * @description 해당 폴더에 있는 모든 픽 리스트를 조회합니다.
         */
        get: operations["getPickListByUser_1"];
        /**
         * 픽 수정
         * @description 픽을 수정합니다. (제목, 내용, 태그)
         */
        put: operations["updatePick"];
        /**
         * 픽 생성
         * @description 픽을 생성합니다.
         */
        post: operations["createPick"];
        /**
         * 픽 삭제
         * @description 픽을 수정합니다. (제목, 내용, 태그)
         */
        delete: operations["deletePick_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/{folderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 폴더 이름 변경
         * @description 폴더 이름 변경
         */
        put: operations["updateFolderName"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 기본 폴더 Id 조회
         * @description 현재 로그인된 사용자의 기본폴더(ROOT, UNCLASSIFIED, RECYCLE_BIN)의 id를 조회합니다.
         */
        get: operations["getBasicFolderIdMap"];
        put?: never;
        /**
         * 폴더 생성
         * @description 새로운 폴더를 생성. 임시 생성된 상태이며, 적절한 위치로 이동해야 사용 가능함 create->move 까지가 한세트
         */
        post: operations["createFolder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getNewRss"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/structures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 구조 json 조회
         * @description 현재 로그인된 유저의 db에 저장되어있는 json 조회
         */
        get: operations["getStructure"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/{pickId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 픽 상세 조회
         * @description 하나의 픽에 대한 상세 정보를 조회합니다.
         */
        get: operations["getPickById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/picks/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * URL로 픽 조회
         * @description URL로 픽 id를 획득합니다.
         */
        get: operations["getPickIdByUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 링크 URL로 링크를 조회하는 API */
        get: operations["getByUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/links/{linkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 링크 ID로 링크를 조회하는 API */
        get: operations["getById"];
        put?: never;
        post?: never;
        /** @description 링크 ID로 링크를 삭제하는 API */
        delete: operations["deleteById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/links/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 모든 링크를 조회하는 API */
        get: operations["getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/parent/{folderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 자식 폴더 조회
         * @description 특정 폴더에 속한 폴더를 조회합니다. 본인의 폴더가 아니면 403예외가 발생합니다.
         */
        get: operations["getFolderListByParentFolderId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tag/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 태그 삭제
         * @description 자신이 등록한 태그를 삭제한다.
         */
        delete: operations["deleteTagById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TagUpdateRequest: {
            /** Format: int64 */
            tagId?: number;
            tagName?: string;
            /** Format: int32 */
            tagOrder?: number;
            /** Format: int32 */
            colorNumber: number;
        };
        TagResponse: {
            /** Format: int64 */
            tagId?: number;
            tagName?: string;
            /** Format: int32 */
            tagOrder?: number;
            /** Format: int32 */
            colorNumber?: number;
            /** Format: int64 */
            userId?: number;
        };
        FolderServerNode: WithRequired<components["schemas"]["ServerNode"], "id" | "type"> & {
            /** Format: int64 */
            folderId: number;
            children: (components["schemas"]["FolderServerNode"] | components["schemas"]["PickServerNode"])[];
        };
        PickServerNode: WithRequired<components["schemas"]["ServerNode"], "id" | "type"> & {
            /** Format: int64 */
            pickId: number;
        };
        ServerNode: {
            id: string;
            /** @enum {string} */
            type: "pick" | "folder";
        };
        StructureMoveRequest: {
            /** Format: int64 */
            parentFolderId?: number;
            structure?: components["schemas"]["StructureServerNode"];
        };
        StructureServerNode: {
            root: (components["schemas"]["FolderServerNode"] | components["schemas"]["PickServerNode"])[];
            recycleBin: (components["schemas"]["FolderServerNode"] | components["schemas"]["PickServerNode"])[];
        };
        PickUpdateRequest: {
            /** Format: int64 */
            id?: number;
            title?: string;
            memo?: string;
            tagIdList?: number[];
        };
        LinkUrlResponse: {
            /** Format: int64 */
            id?: number;
            url?: string;
            imageUrl?: string;
        };
        PickResponse: {
            /** Format: int64 */
            id?: number;
            title?: string;
            memo?: string;
            /** Format: int64 */
            folderId?: number;
            /** Format: int64 */
            userId?: number;
            tagList?: components["schemas"]["TagResponse"][];
            linkUrlResponse?: components["schemas"]["LinkUrlResponse"];
        };
        FolderUpdateRequest: {
            name?: string;
        };
        TagCreateRequest: {
            tagName: string;
            /** Format: int32 */
            colorNumber: number;
        };
        LinkRequest: {
            url?: string;
            title?: string;
            description?: string;
            imageUrl?: string;
        };
        PickCreateRequest: {
            memo?: string;
            title?: string;
            tagIdList?: number[];
            linkRequest?: components["schemas"]["LinkRequest"];
        };
        FolderCreateRequest: {
            name?: string;
        };
        FolderResponse: {
            /** Format: int64 */
            id?: number;
            name?: string;
            /** Format: int64 */
            parentFolderId?: number;
            /** Format: int64 */
            userId?: number;
        };
        Channel: {
            item?: components["schemas"]["Item"][];
        };
        Item: {
            title?: string;
            link?: string;
            guid?: string;
            pubDate?: string;
            description?: string;
            creator?: string;
            category?: string[];
        };
        ApiErrorBody: {
            code?: string;
            message?: string;
        };
        LinkResponse: {
            /** Format: int64 */
            id?: number;
            url?: string;
            title?: string;
            description?: string;
            imageUrl?: string;
        };
        StructureDeleteRequest: {
            structure?: components["schemas"]["StructureServerNode"];
        };
        PickDeleteRequest: {
            /** Format: int64 */
            id?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getTagListByUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 태그 리스트를 정상적으로 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TagResponse"][];
                };
            };
        };
    };
    updateTagList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 태그 수정 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagUpdateRequest"][];
            };
        };
        responses: {
            /** @description 태그 리스트를 정상적으로 수정했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TagResponse"][];
                };
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 태그 생성 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagCreateRequest"];
            };
        };
        responses: {
            /** @description 태그를 정상적으로 생성했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TagResponse"];
                };
            };
        };
    };
    movePick: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pickId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StructureMoveRequest"];
            };
        };
        responses: {
            /** @description 픽을 성공적으로 이동했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 접근할 수 없는 폴더입니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deletePick: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pickId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StructureDeleteRequest"];
            };
        };
        responses: {
            /** @description 픽을 성공적으로 삭제했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 휴지통에 있는 픽만 삭제 가능합니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 접근할 수 없는 폴더입니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    moveFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                folderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StructureMoveRequest"];
            };
        };
        responses: {
            /** @description 폴더를 성공적으로 이동했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 기본폴더는 수정/이동이 불가능합니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 접근할 수 없는 폴더입니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteFolder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                folderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StructureDeleteRequest"];
            };
        };
        responses: {
            /** @description 폴더를 성공적으로 삭제했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 휴지통에 있는 폴더만 삭제 가능합니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 접근할 수 없는 폴더입니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPickListByUser_1: {
        parameters: {
            query?: {
                parentId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 폴더 픽 리스트 조회에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PickResponse"][];
                };
            };
        };
    };
    updatePick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PickUpdateRequest"];
            };
        };
        responses: {
            /** @description 픽 수정에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PickResponse"];
                };
            };
        };
    };
    createPick: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PickCreateRequest"];
            };
        };
        responses: {
            /** @description 픽 생성에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PickResponse"];
                };
            };
            /** @description 픽이 이미 존재합니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PickResponse"];
                };
            };
        };
    };
    deletePick_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PickDeleteRequest"];
            };
        };
        responses: {
            /** @description 픽 삭제에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateFolderName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                folderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderUpdateRequest"];
            };
        };
        responses: {
            /** @description 폴더 이름은 정상적으로 변경했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 기본 폴더는 변경할 수 없습니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description 접근할 수 없는 폴더입니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getBasicFolderIdMap: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 기본폴더 id를 정상적으로 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": {
                        [key: string]: number;
                    };
                };
            };
        };
    };
    createFolder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FolderCreateRequest"];
            };
        };
        responses: {
            /** @description 폴더를 정상적으로 생성했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FolderResponse"];
                };
            };
            /** @description 중복된 폴더 이름 입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FolderResponse"];
                };
            };
        };
    };
    getNewRss: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Channel"][];
                };
            };
        };
    };
    getStructure: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 구조 json을 정상적으로 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getPickById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pickId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 상세 정보 조회에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PickResponse"];
                };
            };
        };
    };
    getPickIdByUrl: {
        parameters: {
            query: {
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 픽 id 획득에 성공하였습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
            /** @description 픽 id가 존재하지 않습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
        };
    };
    getByUrl: {
        parameters: {
            query: {
                /** @description 링크 URL */
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LinkResponse"];
                };
            };
            /** @description [LI-000] 존재하지 않는 링크 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiErrorBody"];
                };
            };
        };
    };
    getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 링크 ID */
                linkId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["LinkResponse"];
                };
            };
            /** @description [LI-000] 존재하지 않는 링크 */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiErrorBody"];
                };
            };
        };
    };
    deleteById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 링크 ID */
                linkId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description [LI-001] 링크를 픽한 사람이 존재 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiErrorBody"];
                };
            };
        };
    };
    getAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getFolderListByParentFolderId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                folderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 폴더를 정상적으로 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FolderResponse"][];
                };
            };
            /** @description 접근할 수 없는 폴더입니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FolderResponse"][];
                };
            };
        };
    };
    deleteTagById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 태그를 정상적으로 삭제했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
